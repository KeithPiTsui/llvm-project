//===-- LCCSubtarget.h - Define Subtarget for the LCC ---------*- C++ -*-===//
//
//                     The LLVM Compiler Infrastructure
//
// This file is distributed under the University of Illinois Open Source
// License. See LICENSE.TXT for details.
//
//===----------------------------------------------------------------------===//
//
// This file declares the LCC specific subclass of TargetSubtargetInfo.
//
//===----------------------------------------------------------------------===//

#ifndef LLVM_LIB_TARGET_LCC_LCCSUBTARGET_H
#define LLVM_LIB_TARGET_LCC_LCCSUBTARGET_H

#include "LCCFrameLowering.h"
#include "LCCISelLowering.h"
#include "LCCInstrInfo.h"
#include "llvm/CodeGen/SelectionDAGTargetInfo.h"
#include "llvm/CodeGen/TargetSubtargetInfo.h"
#include "llvm/IR/DataLayout.h"
#include "llvm/MC/MCInstrItineraries.h"
#include "llvm/Support/Alignment.h"
#include <string>

#define GET_SUBTARGETINFO_HEADER
#include "LCCGenSubtargetInfo.inc"

//@1
namespace llvm {
class StringRef;
class LCCTargetMachine;
class LCCSubtarget : public LCCGenSubtargetInfo {

protected:
  bool IsLittle;
  InstrItineraryData InstrItins;
  const LCCTargetMachine &TM;
  Triple TargetTriple;
  const SelectionDAGTargetInfo TSInfo;
  std::unique_ptr<const LCCInstrInfo> InstrInfo;
  std::unique_ptr<const LCCFrameLowering> FrameLowering;
  std::unique_ptr<const LCCTargetLowering> TLInfo;

public:
  bool isPositionIndependent() const;
  const LCCABIInfo &getABI() const;
  /// This constructor initializes the data members to match that
  /// of the specified triple.
  LCCSubtarget(const Triple &TT, const std::string &CPU, const std::string &FS,
               bool little, const LCCTargetMachine &_TM);
  //- Vitual function, must have
  /// ParseSubtargetFeatures - Parses features string setting specified
  /// subtarget options.  Definition of function is auto generated by tblgen.
  void ParseSubtargetFeatures(StringRef CPU, StringRef FS);

  bool isLittle() const { return IsLittle; }
  bool abiUsesSoftFloat() const;
  Align stackAlignment() const { return Align(8); }
  LCCSubtarget &initializeSubtargetDependencies(StringRef CPU, StringRef FS,
                                                const TargetMachine &TM);
  const SelectionDAGTargetInfo *getSelectionDAGInfo() const override {
    return &TSInfo;
  }
  const LCCInstrInfo *getInstrInfo() const override { return InstrInfo.get(); }
  const TargetFrameLowering *getFrameLowering() const override {
    return FrameLowering.get();
  }
  const LCCRegisterInfo *getRegisterInfo() const override {
    return &InstrInfo->getRegisterInfo();
  }
  const LCCTargetLowering *getTargetLowering() const override {
    return TLInfo.get();
  }
  const InstrItineraryData *getInstrItineraryData() const override {
    return &InstrItins;
  }
};
} // namespace llvm

#endif // #if CH >= CH3_1
